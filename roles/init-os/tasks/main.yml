---
# task file for initialize OS
# install common software
# enable ntpd
# disable firewalld, selinux

  - name: install epel packages
    yum:
      name: epel-release

  - name: install basic packages
    yum:
      name: "{{ basic_packages }}"
    vars:
      basic_packages:
      - ntp
      - unzip
      - rsync
      - nmap.x86_64
      - vim
      - lrzsz
      - bash-completion
      - net-tools
      - sysstat
      - iotop
      - iftop
      - wget

  - name: enable ntpd service
    service: name=ntpd state=started enabled=yes

  - name: disable firewalld service
    service: name=firewalld state=stopped enabled=no

  - name: disable selinux
    shell: setenforce 0
  - name: disable selinux forever
    lineinfile:
      dest: /etc/selinux/config
      regexp: '^SELINUX=enforcing'
      line: 'SELINUX=disabled'
      state: present

  # make sure /opt use the largest partition of disk
  - name: check largest partition point
    shell: "lsblk | awk '{if ($7) print $4 \" \" $7}' | sort -h | tail -n 1 | awk '{print $2}'"
    register: max_partition_point
    delegate_to: "{{ inventory_hostname }}"
  - name: read /opt old link
    shell: "readlink /opt"
    register: opt_old_link
  - name: check if /opt is empty
    shell: "du -h /opt --max-depth=0 | awk '{print $1}'"
    register: opt_directory_usage
  - name: create symbol link when /opt is not linked to largest partition point and /opt is empty
    file:
      src: "{{ max_partition_point.stdout }}"
      name: /opt
      state: link
      force: yes
    when: 
      max_partition_point.stdout != opt_old_link.stdout and
      max_partition_point.stdout[0] == '/' and
      max_partition_point.stdout != '/' and
      max_partition_point.stdout != '/opt' and
      opt_directory_usage.stdout == '0'

  # prepare directories
  - name: make /opt/app directory
    file:
      path: /opt/{{ item }}
      state: directory
      recurse: yes
      mode: '0755'
    with_items:
      - app
      - data

  - name: init hostname
    hostname:
      name: "{{ inventory_hostname }}"
      use: redhat

  # use with_inventory_hostnames to set all hosts to /etc/hosts
  - name: set hosts file
    lineinfile:
      dest: /etc/hosts
      regexp: "^.*? {{ item }}$"
      line: "{{ hostvars[item]['ansible_ssh_host'] }} {{ item }}"
      state: present
      create: yes
    with_inventory_hostnames: all
