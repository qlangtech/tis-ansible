---
- name: init compile
  vars_files:
    - vars.yml
  hosts: localhost
  tasks:
    - name: init source code dir:'{{src_root}}'
      file:
        path: "{{src_root}}"
        state: directory
    - name: init release dir:'{{ tis_release_dir }}/{{tis_release_dir_name}}'
      file:
        path: "{{ tis_release_dir }}/{{item}}"
        state: directory
      with_items:
        - '{{tis_release_dir_name}}'
        - '{{tis_plugin_release_dir_name}}'
    - name: download system dependencies
      include_role:
        name: download
      vars:
        - shall_download_plugins: no
        - shall_download_release_assemble: no
  tags: always

- name: make ng-tis package
  vars_files:
    - vars.yml
  hosts: localhost
  roles:
    - role: ng-tis
  tags:
    - ng-tis

- name: compile tis src tar package
  vars_files:
    - vars.yml
  hosts: localhost
  roles:
    - role: compile
  tags:
    - pkg


- name: compile tis-plugin component tar package
  vars_files:
    - vars.yml
  vars:
    exec_deploy: True
    app_local_dir_name: "{{tis_plugin_release_dir_name}}"
    git_src: "git@github.com:qlangtech/plugins.git"
    target_file_pattern: .*\.(tpi|tar\.gz)$
  hosts: localhost
  tasks:
    #    - name: register plugin_dirs in {{src_root}}/{{tis_plugin_release_dir_name}}
    #      shell: "find {{src_root}}/{{tis_plugin_release_dir_name}}/* -maxdepth 1 -type d -name '*-plugin' -printf '%f '"
    #      ignore_errors: True
    #      register: plugin_dirs
    #      delegate_to: "localhost"
    #    - debug:
    #        msg: "registed param plugin_dirs: {{plugin_dirs.stdout}}"
    - include_role:
        name: compile
      vars:
        tisasm_put_mojo: 'tis-datax-common-plugin tis-local-dump-build tis-solr-plugin tis-aliyun-fs-plugin tis-asyncmsg-rocketmq-plugin tis-hdfs-plugin tis-hive-flat-table-builder-plugin tis-k8s-plugin tis-spark-hive-server-extends tis-ds-mysql-plugin tis-ds-tidb-plugin tis-kafka-plugin'
  tags:
    - pkg-plugin

- name: build Uber package
  vars_files:
    - vars.yml
  vars:
    app_dir: '/tmp/tis-uber'
    zk_parent_dir: '{{app_dir}}'
    zk_dir_name: 'zookeeper'
    bin_dir_name: "bin"
    tis_app_dir: "{{app_dir}}/{{bin_dir_name}}"
    data_dir_name: 'data'
    relative_root_dir: '../'
    tis_data_dir: '{{app_dir}}/{{data_dir_name}}'
    tisconsole_db_type: 'derby'
    tisconsole_db_dbname: 'tis_console_db'
    shall_exec_restart: no
    uber_pkg: yes
    zk_user: tis
    zk_group: tis
    zk_node_id: 1
  hosts: localhost
  tasks:
    - name: 'clean the targetDir {{app_dir}}'
      file:
        path: '{{app_dir}}'
        state: absent
    - include_role:
        name: zookeeper
#      vars:
#        relative_root_dir: '../../'
    - name: start zookeeper
      command: "./bin/zkServer.sh start"
      ignore_errors: false
      args:
        chdir: "{{zk_parent_dir}}/{{zk_dir_name}}"
    - name: sleep 10 sec
      command: sleep 10
      ignore_errors: yes
    - include_role:
        name: console
    - name: shutdown zookeeper
      command: "./bin/zkServer.sh stop"
      ignore_errors: yes
      args:
        chdir: "{{zk_parent_dir}}/{{zk_dir_name}}"
    - include_role:
        name: assemble
#    - include_role:
#        name: cluster-state-collector
    - include_role:
        name: solr-core
    - name: set launch script
      template:
        src: "template/{{item}}.j2"
        dest: "{{app_dir}}/bin/{{item}}"
        force: no
        mode: '766'
      with_items:
        - "tis.sh"
    - name: arrange jars
      shell: 'java -classpath ../web-start/lib/*:./lib/*:./conf  com.qlangtech.tis.runtime.module.action.SysInitializeArrangeJars {{app_dir}}'
      run_once: true
      args:
        chdir: "{{app_dir}}/tjs"
    - include: install_ng_tis.yml
    - name: "archive uber package"
      archive:
        path: "{{app_dir}}"
        dest: "{{ tis_release_dir }}/tis-uber.tar.gz"
        remove: yes
  tags:
    - uber



- name: make tis-incr docker image
  #  vars_prompt:
  #    - name: "docker_password"
  #      prompt: "docker repository password"
  #      private: yes
  vars_files:
    - vars.yml
  hosts: localhost
  roles:
    - role: tis-incr
  tags:
    - incr
#   - deploy

- name: make DataX docker image
  #  vars_prompt:
  #    - name: "docker_password"
  #      prompt: "docker repository password"
  #      private: yes
  vars_files:
    - vars.yml
  vars:
    tis_incr_name: 'tis-datax-executor'
  hosts: localhost
  roles:
    - role: tis-incr
  tags:
    - datax-docker



- import_playbook: install_struct.yml
  

