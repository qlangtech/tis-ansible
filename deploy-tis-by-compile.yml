---
- name: init compile
  vars_files:
    - vars.yml
    - vars-deploy.yml
  hosts: localhost
  tasks:
    - name: init source code dir:'{{src_root}}'
      file:
        path: "{{src_root}}"
        state: directory
    - name: init release dir:'{{ tis_release_dir }}/{{tis_release_dir_name}}'
      file:
        path: "{{ tis_release_dir }}/{{item}}"
        state: directory
      with_items:
        - '{{tis_release_dir_name}}'
        - '{{tis_plugin_release_dir_name}}'
    - name: download system dependencies
      include_role:
        name: download
      vars:
        - shall_download_plugins: no
        - shall_download_release_assemble: no
  tags: always

- name: "make ng-tis package"
  vars_files:
    - vars.yml
  hosts: localhost
  roles:
    - role: ng-tis
  tags:
    - ng-tis

- name: compile tis src tar package
  vars_files:
    - vars.yml
    - vars-deploy.yml
  hosts: localhost
  tasks:
    - include_role:
        name: compile
    - name: include install_console_dependencies.yml
        # this is used for TestCase
      import_tasks: roles/console/tasks/install_console_dependencies.yml
  tags:
    - pkg


- name: compile tis-plugin component tar package
  vars_files:
    - vars.yml
  vars:
    exec_deploy: True
    app_local_dir_name: "{{tis_plugin_release_dir_name}}"
    git_src: "git@github.com:qlangtech/plugins.git"
    target_file_pattern: .*\.(tpi|tar\.gz)$
    maven_extra_params:
      - "''"
     # 测试期间先只用一种classifier
      - '"-Paliyun-emr -pl tis-datax/tis-hive-plugin,tis-datax/tis-datax-hdfs-plugin,tis-datax/tis-datax-hudi-common,tis-datax/tis-datax-hudi-plugin,tis-datax/tis-datax-hdfs-reader-writer-plugin,tis-datax/tis-hive-flat-table-builder-plugin,tis-incr/tis-sink-hudi-plugin"'
  hosts: localhost
  tasks:
    - include_role:
        name: compile
  tags:
    - pkg-plugin

- name: compile tis-zepplin component tar package
  vars_files:
    - vars.yml
  vars:
    exec_deploy: True
    app_local_dir_name: "zeppelin"
    git_src: "git@github.com:qlangtech/zeppelin.git"
    git_branch: "tis-v0.10.1"
    maven_extra_params:
      - "'-DskipRat -DskipTests=true -Dappname=all -pl jdbc-tis,elasticsearch-tis,zeppelin-server,zeppelin-client,zeppelin-package,tis-zeppelin -am'"
  hosts: localhost
  tasks:
    - include_role:
        name: compile
  tags:
    - zeppelin

- name: package flink component tar package and deploy docker image to hub
  vars_files:
    - vars.yml
  vars:
    exec_deploy: False
    tis_flink_extend_artifact_name: "tis-flink-extends-dist"
    flink_extends_dist_jar_path: "{{src_root}}/{{tis_plugin_release_dir_name}}/tis-incr/tis-flink-extends/target/{{tis_flink_extend_artifact_name}}-{{tis_pkg_version}}.jar"
    app_local_dir_name: "flink"
    script_prefix: "{{app_local_dir_name}}-"
    git_src: "git@github.com:qlangtech/flink.git"
    git_branch: "tis-1.13.1"
    target_file_pattern: .*\.(tpi|tar\.gz)$
    tis_incr_name: "{{app_local_dir_name}}"
    tis_incr_tar_name: "{{app_local_dir_name}}-{{git_branch}}-bin.tar.gz"
    docker_file_template: "{{app_local_dir_name}}_Dockerfile.j2"
    entrypoint_shell_name: "docker-entrypoint.sh"
  hosts: localhost
  tasks:
    - name: "register '{{flink_extends_dist_jar_path}}' status"
      stat:
       path: "{{flink_extends_dist_jar_path}}"
      register: extends_dist_file_status
    - assert:
        that: extends_dist_file_status.stat.exists
        fail_msg: "file: '{{flink_extends_dist_jar_path}}' must exists"
    - include_role:
        name: compile
#    - include_role:
#        name: flink
    - include_role:
        name: deploy-tar
      tags: deploy
    # make flink docker image
    - include_role:
        name: tis-incr
  tags:
    - flink-docker


- name: build Uber package
  vars_files:
    - vars.yml
  vars:
    app_dir: '/tmp/tis-uber'
    zk_parent_dir: '{{app_dir}}'
    zk_dir_name: 'zookeeper'
    bin_dir_name: "bin"
    tis_app_dir: "{{app_dir}}/{{bin_dir_name}}"
    data_dir_name: 'data'
    relative_root_dir: '../'
    tis_data_dir: '{{app_dir}}/{{data_dir_name}}'
    tisconsole_db_type: 'derby'
    tisconsole_db_dbname: 'tis_console_db'
    shall_exec_restart: no
    uber_pkg: yes
    uber_attach_plugins:
      - "tis-k8s-plugin"
      - "tis-datax-common-plugin"
      - "tis-datax-local-executor"
    zk_user: tis
    zk_group: tis
    zk_node_id: 1
    tis_tar_dist_dir: "{{ tis_release_dir }}/{{tis_release_dir_name}}/{{tis_pkg_version}}/tis-uber"
  hosts: localhost
  tasks:
    - name: 'clean the targetDir {{app_dir}}'
      file:
        path: '{{app_dir}}'
        state: absent
#    - include_role:
#        name: zookeeper
#      vars:
#        relative_root_dir: '../../'
#    - name: "start zookeeper in {{zk_parent_dir}}/{{zk_dir_name}}"
#      command: "./bin/zkServer.sh start"
#      ignore_errors: false
#      args:
#        chdir: "{{zk_parent_dir}}/{{zk_dir_name}}"
#    - name: sleep 10 sec
#      command: sleep 10
#      ignore_errors: yes
    - include_role:
        name: console
    - name: "copy zeppelin context package from: {{tis_release_dir}}/{{tis_release_dir_name}}/tis-zeppelin.tar.gz"
      unarchive:
        src: "{{tis_release_dir}}/{{tis_release_dir_name}}/tis-zeppelin.tar.gz"
        dest: "{{app_dir}}/"
        remote_src: yes
      #    - name: shutdown zookeeper
#      command: "./bin/zkServer.sh stop"
#      ignore_errors: yes
#      args:
#        chdir: "{{zk_parent_dir}}/{{zk_dir_name}}"
    - include_role:
        name: assemble
#    - include_role:
#        name: cluster-state-collector
#    - include_role:
#        name: solr-core
#    - name: set launch script
#      template:
#        src: "template/{{item}}.j2"
#        dest: "{{app_dir}}/bin/{{item}}"
#        force: no
#        mode: '766'
#      with_items:
#        - "tis.sh"
    - name: "init logs dir '{{app_dir}}/logs'"
      file:
        path: "{{app_dir}}/logs"
        state: directory
    - name: arrange jars
      shell: 'java -classpath ../web-start/lib/*:./lib/*:./conf  com.qlangtech.tis.runtime.module.action.SysInitializeArrangeJars {{app_dir}}'
      run_once: true
      args:
        chdir: "{{app_dir}}/tjs"
    - include: install_ng_tis.yml
    - name: "make uber target dir:{{ tis_tar_dist_dir }}"
      file:
        path: "{{ tis_tar_dist_dir }}"
        state: directory
    - name: "archive uber package,target dir:{{ tis_tar_dist_dir }}"
      archive:
        path: "{{app_dir}}"
        dest: "{{tis_tar_dist_dir}}/tis-uber.tar.gz"
        remove: yes
    - name: "make a soft link from {{tis_tar_dist_dir}}/tis-uber.tar.gz to {{ tis_release_dir }}/tis-uber.tar.gz"
      file:
        src: "{{tis_tar_dist_dir}}/tis-uber.tar.gz"
        dest: "{{ tis_release_dir }}/tis-uber.tar.gz"
        state: link
        force: yes
    - include_role:
        name: deploy-tar
      tags: deploy
  tags:
    - uber

- name: build TIS plugins Meta and deploy
  vars_files:
    - vars.yml
  vars:
    git_src: "git@github.com:qlangtech/update-center2.git"
    app_local_dir_name: "update-center2"
    exec_deploy: False
  hosts: localhost
  tasks:
    - include_role:
        name: compile
    - include_role:
        name: update-center
  tags:
    - update-center

- name: make tis-incr docker image
  #  vars_prompt:
  #    - name: "docker_password"
  #      prompt: "docker repository password"
  #      private: yes
  vars_files:
    - vars.yml
  hosts: localhost
  roles:
    - role: tis-incr
  tags:
    - incr
#   - deploy

- name: make DataX docker image
  #  vars_prompt:
  #    - name: "docker_password"
  #      prompt: "docker repository password"
  #      private: yes
  vars_files:
    - vars.yml
  vars:
    tis_incr_name: 'tis-datax-executor'
  hosts: localhost
  roles:
    - role: tis-incr
  tags:
    - datax-docker



- import_playbook: install_struct.yml


